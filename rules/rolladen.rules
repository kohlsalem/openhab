import org.openhab.core.library.types.*


// Remember old states, in case rolershutters have been raised on opening the dores
var Number oldStateTTWest = 0
var Number oldStateTTSued = 0

// spots shall switch of after some time
//var Timer spotTimer = null  


//send updates to Home Pilot
rule "rule name"
when
  Member of GRollAll received command
then
   logDebug("rolershutter","rolershutter " + triggeringItem.name + " recieved update" + receivedCommand )
   var String myUrl = ""
   switch(triggeringItem.name) {
    case "RollladenWZSL": { myUrl = "http://homepilot/devices/10001"} 
    case "RollladenWZSR": { myUrl = "http://homepilot/devices/10002"} 
    case "RollladenWZSML": { myUrl = "http://homepilot/devices/10004"} 
    case "RollladenWZSMR": { myUrl = "http://homepilot/devices/10005"}     
    case "RollladenWZWR": { myUrl = "http://homepilot/devices/10006"} 
    case "RollladenWZWL": { myUrl = "http://homepilot/devices/10007"} 
    case "RollladenSZR": { myUrl = "http://homepilot/devices/10008"} 
    case "RollladenSZL": { myUrl = "http://homepilot/devices/10009"} 
    case "RollladenSZA": { myUrl = "http://homepilot/devices/10010"} 
   }
  
  var String myData = '{"name":"GOTO_POS_CMD","value":"' + receivedCommand  + '"}'
  logDebug("rolershutter","Sending put "+ myData + " to " + myUrl)
  sendHttpPutRequest(myUrl, "application/x-www-form-urlencoded", myData)
end


// Update WZ items for Alexa
rule "SetWohnzimmer"
when
	Item RollladenWZAlexa received command
then
  logDebug("Tuer","SetWohnzimmer: Entering Rule")
  //val l        = (LichtCouchtisch.state as DecimalType).intValue
  val position =  (RollladenWZAlexa.state as DecimalType).intValue 
  RollladenWZWL.send(new PercentType(position))
  RollladenWZWR.send(new PercentType(position))
  RollladenWZSL.send(new PercentType(position))
  RollladenWZSML.send(new PercentType(position))
  RollladenWZSMR.send(new PercentType(position))
  RollladenWZSR.send(new PercentType(position))
end 

rule "SetWohnzimmerWest"
when
	Item RollladenWZWAlexa received command
then
  logDebug("Tuer","SetWohnzimmerWest: Entering Rule")
  //val l        = (LichtCouchtisch.state as DecimalType).intValue
  val position =  (RollladenWZWAlexa.state as DecimalType).intValue 
  RollladenWZWL.send(new PercentType(position))
  RollladenWZWR.send(new PercentType(position))
 
end 

rule "SetWohnzimmerSued"
when
	Item RollladenWZSAlexa received command
then
  logDebug("Tuer","SetWohnzimmerSued: Entering Rule")
  //val l        = (LichtCouchtisch.state as DecimalType).intValue
  val position =  (RollladenWZSAlexa.state as DecimalType).intValue 
  
  RollladenWZSL.send(new PercentType(position))
  RollladenWZSML.send(new PercentType(position))
  RollladenWZSMR.send(new PercentType(position))
  RollladenWZSR.send(new PercentType(position))
end 
rule "SetSchlafzimmer"
when
	Item RollladenSZAlexa received command
then
  logDebug("Tuer","SetSchlafzimmer: Entering Rule")
  //val l        = (LichtCouchtisch.state as DecimalType).intValue
  val position =  (RollladenSZAlexa.state as DecimalType).intValue 
  
  if(position>88 && position<92){
  	RollladenSZL.send(new PercentType(100))
    RollladenSZR.send(new PercentType(58))
  } else{
  	
  	RollladenSZL.send(new PercentType(position))
    RollladenSZR.send(new PercentType(position))
  }
  
    
end 

rule "SetAlexRolladen"
when
	Item RollladenAlexAlexa received command
then
  logDebug("Tuer","SetAlexRolladen: Entering Rule")
  //val l        = (LichtCouchtisch.state as DecimalType).intValue
  val position =  (RollladenAlexAlexa.state as DecimalType).intValue 
  RollladenSZA.send(new PercentType(position))
end 
// put the west blinds down to 1/2 (equals 30%)
rule "Increase counter"
when
	Time cron "0 30 21 1/1 * ? *"  //http://www.cronmaker.com/
then
  val positionWL = (RollladenWZWL.state as DecimalType).intValue
  val positionWR = (RollladenWZWR.state as DecimalType).intValue
  
  if (positionWL<30) RollladenWZWL.send(new PercentType(30))
  if( TerrasseWest.state == "CLOSED" ){
    if (positionWR<30) RollladenWZWR.send(new PercentType(30))
  }	else
  {
  	 oldStateTTWest = 30
  }
end


// On opening of the door, i want to have some light
rule "TUplightsOn"
when 
   Item TerrasseWest  received update 
or
   Item Sun_Elevation  received update
then   
  logDebug("Tuer", "TUplightsOn: Entering Rule")
  val elevation = (Sun_Elevation.state as DecimalType).intValue
  
  logDebug("Tuer", "TUplightsOn: Door: {} Elevation: {}",TerrasseWest.state, elevation)
  
  if(( TerrasseWest.state == "OPEN" ) &&  
  	 ( elevation < 0) &&
  	 ( now.getHourOfDay>18)){
  	 	
    GartenUplights.sendCommand( "ON" )
  } else
  {
  	GartenUplights.sendCommand( "OFF" )
  }  
end

// I want to optically enhance the living room. So, if sun goes down
// spotlites shall switch on. Up to 6 h or untill the shutters go down. 
rule "Spotlights"
when 
   Item RollladenWZWR changed
or 
   Item RollladenWZWL changed
or
   Item Sun_Elevation  received update
then
  logDebug("Tuer", "Spotlights: Entering Rule")
  val elevation = (Sun_Elevation.state as DecimalType).intValue
  val positionWL = (RollladenWZWL.state as DecimalType).intValue
  val positionWR = (RollladenWZWR.state as DecimalType).intValue
  
  if ((positionWL<70) && 
  	  (positionWR<70) &&
  	  (elevation<0) &&
  	  (now.getHourOfDay>18)){
  	  	
       GartenSpotlight.sendCommand(ON)
    //   spotTimer = createTimer(now.plusHours(6)) [|
    //      GartenSpotlight.sendCommand(OFF)
    //     spotTimer = null   // reset the timer
 	
  	  	
  } else  {
  	GartenSpotlight.sendCommand(OFF)
  } 
   
end
// if door opens and shutters are down - open them, and close them later
rule "TTWestOpen"
when 
  Item TerrasseWest changed from CLOSED to OPEN
then
  logDebug("Tuer", "TTWestOpen: Entering Rule")
 
  // get the JSON of the door only - i want to see the state NOW, not the polled one which could be outdated
  var String json = sendHttpGetRequest("http://homepilot/deviceajax.do?device=10006")
  var Number position = Integer::parseInt(transform("JSONPATH", "$.device.position", json))
  logDebug("Tuer", "TTWestOpen: Shutter at {}", position)
  
  oldStateTTWest = position; // save last position
  
  if(position>30){ // ignore "sunshade" positions
     logDebug("Tuer", "TTWestOpen: Open Shutter")
    RollladenWZWR.send(new PercentType(0)) // open rolershutter   	   
  } 
end  
// if door opens and shutters are down - open them, and close them later
rule "TTWestClose"
when 
  Item TerrasseWest changed from OPEN to CLOSED
then
  logDebug("Tuer", "TTWestClose: Entering Rule")
  logDebug("Tuer", "TTWestClose: Restoring Shutter to {} ",oldStateTTWest)
  RollladenWZWR.send(new PercentType(oldStateTTWest.intValue))
end
// prevent shutters from locking me outside. If door is open but some
// timer closed the shutter --> reopen them
rule "TTWestSecurity"
when 
  Item RollladenWZWR changed
then
  logDebug("Tuer", "TTWestSecurity: Entering Rule")
  if( TerrasseWest.state == "OPEN" ){
	  val position = (RollladenWZWR.state as DecimalType).intValue
	  logDebug("Tuer", "TTWestSecurity: Shutter at {}", position)	  
	    if(position>30){ // ignore "sunshade" positions
	     logDebug("Tuer", "TTWestSecurity: Open Shutter")
	    RollladenWZWR.send(new PercentType(0)) // open rolershutter   	   
	  }
  }
end

// if door opens and shutters are down - open them, and close them later
rule "TTSuedOpen"
when 
  Item TerrasseSued changed from CLOSED to OPEN
then
  logDebug("Tuer", "TTSuedOpen: Entering Rule")
 
  // get the JSON of the door only - i want to see the state NOW, not the polled one which could be outdated
  var String json = sendHttpGetRequest("http://homepilot/deviceajax.do?device=10005")
  var Number position = Integer::parseInt(transform("JSONPATH", "$.device.position", json))
  logDebug("Tuer", "TTSuedOpen: Shutter at {}", position)
  
  oldStateTTSued = position; // save last position
  
  if(position>30){ // ignore "sunshade" positions
     logDebug("Tuer", "TTSuedOpen: Open Shutter")
    RollladenWZSMR.send(new PercentType(0)) // open rolershutter   	   
  } 
end  
// if door opens and shutters are down - open them, and close them later
rule "TTSuedClose"
when 
  Item TerrasseSued changed from OPEN to CLOSED
then
  logDebug("Tuer", "TTSuedClose: Entering Rule")
  logDebug("Tuer", "TTSuedClose: Restoring Shutter to {} ",oldStateTTSued)
  RollladenWZSMR.send(new PercentType(oldStateTTSued.intValue))
end
// prevent shutters from locking me outside. If door is open but some
// timer closed the shutter --> reopen them
rule "TTSuedSecurity"
when 
  Item RollladenWZSMR changed
then
  logDebug("Tuer", "TTSuedSecurity: Entering Rule")
  if( TerrasseSued.state == "OPEN" ){
	  val position = (RollladenWZSMR.state as DecimalType).intValue
	  logDebug("Tuer", "TTSuedSecurity: Shutter at {}", position)	  
	    if(position>30){ // ignore "sunshade" positions
	     logDebug("Tuer", "TTSuedSecurity: Open Shutter")
	    RollladenWZSMR.send(new PercentType(0)) // open rolershutter   	   
	  }
  }
end
